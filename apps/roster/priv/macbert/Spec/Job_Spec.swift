func get_Job() -> Model {
  return Model(value:Tuple(name:"Job",body:[
    Model(value:Chain(types:[
        Model(value:List(constant:"")),
        Model(value:Number())])),
    Model(value:Chain(types:[
        Model(value:Atom(constant:"chain")),
        Model(value:List(constant:""))])),
    get_act(),
    Model(value:Chain(types:[
        Model(value:List(constant:"")),
        Model(value:Number())])),
    Model(value:Chain(types:[
        Model(value:List(constant:"")),
        Model(value:Number())])),
    Model(value:Chain(types:[
        Model(value:List(constant:"")),
        Model(value:Number()),
        Model(value:Binary())])),
    Model(value:Chain(types:[
        Model(value:List(constant:"")),
        Model(value:Number()),
        get_process()])),
    Model(value:Chain(types:[
        Model(value:List(constant:"")),
        Model(value:Number())])),
    Model(value:Chain(types:[
        Model(value:List(constant:"")),
        Model(value:Binary()),
        Model(value:List(constant:nil, model:Model(value:Chain(types:[
            Model(value:Chain(types:[Model(value:Tuple()),Model(value:Atom()),Model(value:Binary()),Model(value:Number()),Model(value:List(constant:""))])),
            get_Message()]))))])),
    Model(value:Chain(types:[
        Model(value:List(constant:"")),
        Model(value:List(constant:nil,model:get_messageEvent()))])),
    Model(value:Chain(types:[
        Model(value:List(constant:"")),
        Model(value:List(constant:nil,model:get_Feature()))])),
    Model(value:Chain(types:[
        Model(value:List(constant:"")),
        Model(value:Atom(constant:"init")),
        Model(value:Atom(constant:"update")),
        Model(value:Atom(constant:"delete")),
        Model(value:Atom(constant:"pending")),
        Model(value:Atom(constant:"stop")),
        Model(value:Atom(constant:"complete")),
        Model(value:Atom(constant:"restart"))]))]))}
